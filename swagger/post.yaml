paths:
  /posts:
    get:
      tags:
        - Posts
      summary: Get all posts
      parameters:
        - in: query
          name: sort
          schema:
            type: string
          description: Sort by 'popular' or 'newest'
        - in: query
          name: tag
          schema:
            type: string
          description: Filter posts by tag
      responses:
        '200':
          description: Successful retrieval of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Posts
      summary: Create a new post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/{id}:
    get:
      tags:
        - Posts
      summary: Get one post by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Post ID
      responses:
        '200':
          description: Successful retrieval of post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/PostNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - Posts
      summary: Update a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Post ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/AccessError'
        '404':
          $ref: '#/components/responses/PostNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Posts
      summary: Delete a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Post ID
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/AccessError'
        '404':
          $ref: '#/components/responses/PostNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/{id}/comments:
    get:
      tags:
        - Comments
      summary: Get all comments for post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of comments for the post
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Comments
      summary: Create a new comment on a post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentInput'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedComment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/PostNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Post:
      type: object
      required:
        - _id
        - title
        - text
        - tags
        - viewsCount
        - commentsCount
        - user
        - createdAt
        - updatedAt
        - __v
      properties:
        _id:
          type: string
        title:
          type: string
        text:
          type: string
        tags:
          type: array
          items:
            type: string
        viewsCount:
          type: number
        commentsCount:
          type: number
        user:
          type: object
          properties:
            _id:
              type: string
            fullName:
              type: string
            avatarUrl:
              type: string
              nullable: true
        imageUrl:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        __v:
          type: integer

    PostInput:
      type: object
      required:
        - title
        - text
        - tags
      properties:
        title:
          type: string
        text:
          type: string
        tags:
          type: array
          items:
            type: string
        imageUrl:
          type: string
          nullable: true

    Comment:
      type: object
      required:
        - text
        - post
        - user
        - _id
        - createdAt
        - updatedAt
        - __v
      properties:
        text:
          type: string
        post:
          type: string
        user:
          type: object
          properties:
            _id:
              type: string
            fullName:
              type: string
            avatarUrl:
              type: string
              nullable: true
        _id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        __v:
          type: integer

    CommentInput:
      type: object
      required:
        - text
      properties:
        text:
          type: string

    CreatedComment:
      type: object
      required:
        - text
        - post
        - user
        - _id
        - createdAt
        - updatedAt
        - __v
      properties:
        text:
          type: string
        post:
          type: string
        user:
          type: string
        _id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        __v:
          type: integer

    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Unauthorized (token missing or invalid)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: No token provided

    AccessError:
      description: Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Access denied

    PostNotFoundError:
      description: Post not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Post not found

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Internal server error
